AWSTemplateFormatVersion: '2010-09-09'
Description: Single EC2 instance running n8n + Postgres via Docker-Compose

Parameters:
  # n8n application settings
  ClientName:
    Type: String
    Description: Unique identifier for this n8n deployment
  RepoURL:
    Type: String
    Description: Git repo URL containing docker-compose & bootstrap.sh
  RepoBranch:
    Type: String
    Default: main
    Description: Git branch to clone
  PostgresDb:
    Type: String
    Default: n8n
    Description: Database name
  PostgresUser:
    Type: String
    Default: n8n
    Description: Database user
  SsmPostgresPasswordPath:
    Type: String
    Description: SSM path to the SecureString for Postgres password
  SsmEncryptionKeyPath:
    Type: String
    Description: SSM path to the SecureString for n8n encryption key
  BasicAuthActive:
    Type: String
    Default: 'false'
    Description: true|false to enable basic auth
  BasicAuthUser:
    Type: String
    Description: Basic auth username for n8n
  BasicAuthPassword:
    Type: String
    Description: Basic auth password for n8n
  Timezone:
    Type: String
    Default: Europe/London
    Description: Timezone for n8n
  DockerDir:
    Type: String
    Default: docker
    Description: Path in the repo to the Docker Compose directory

  # Infrastructure settings
  AmiId:
    Type: AWS::EC2::Image::Id
    Description: AMI ID for the EC2 instance (e.g., Amazon Linux 2)
  InstanceType:
    Type: String
    Default: t3.small
    Description: EC2 instance type
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Existing EC2 KeyPair name for SSH
  PublicSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Public subnet IDs where the EC2 will launch
  EC2SecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Security Group for the EC2 instance
  InstanceProfileName:
    Type: String
    Description: IAM Instance Profile name for the EC2 role
  UserHome:
    Type: String
    Default: "/ec2-user"
    Description: User home directory for the AMI
  UserName:
    Type: String
    Default: ec2-user
    Description: User name for the AMI
  RepoPath:
    Type: String
    Default: "/home/ec2-user/app"
    Description: Path to the repo in the AMI
  BackupBucketName:
    Type: String
    Default: n8n-backup
    Description: S3 bucket name to store nightly Postgres backups

Resources:
  N8nEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmiId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SubnetId: !Select [ 0, !Ref PublicSubnetIds ]
      SecurityGroupIds:
        - !Ref EC2SecurityGroupId
      IamInstanceProfile: !Ref InstanceProfileName
      UserData:
        Fn::Base64:
          Fn::Sub: |
            #!/usr/bin/env bash
            set -euxo pipefail

            # Ensure git/unzip available
            if command -v yum &>/dev/null; then
              yum install -y git unzip
            else
              apt-get update
              apt-get install -y git unzip
            fi

            # Detect non-root user
            UserName=$(getent passwd 1000 | cut -d: -f1)
            UserHome=$(getent passwd "${UserName}" | cut -d: -f6)

            # Export application parameters
            export CLIENT_NAME="${ClientName}"
            export POSTGRES_DB="${PostgresDb}"
            export POSTGRES_NON_ROOT_USER="${PostgresUser}"
            export SSM_POSTGRES_PASSWORD_PATH="${SsmPostgresPasswordPath}"
            export SSM_ENCRYPTION_KEY_PATH="${SsmEncryptionKeyPath}"
            export N8N_BASIC_AUTH_ACTIVE="${BasicAuthActive}"
            export N8N_BASIC_AUTH_USER="${BasicAuthUser}"
            export N8N_BASIC_AUTH_PASSWORD="${BasicAuthPassword}"
            export GENERIC_TIMEZONE="${Timezone}"
            export DOCKER_COMPOSE_REPO="${RepoURL}"
            export DOCKER_COMPOSE_BRANCH="${RepoBranch}"
            export DOCKER_COMPOSE_DIR="${DockerDir}"

            # Clone or update infra repo
            RepoPath="${UserHome}/app"
            if [ ! -d "${RepoPath}/.git" ]; then
              sudo -u "${UserName}" git clone --branch "${RepoBranch}" "${RepoURL}" "${RepoPath}"
            else
              cd "${RepoPath}"
              sudo -u "${UserName}" git pull
            fi
            chown -R "${UserName}:${UserName}" "${RepoPath}"

            # Execute bootstrap script
            sudo -u "${UserName}" bash "${RepoPath}/aws/bootstrap.sh"

  N8nDbBackupDocument:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Command
      Content:
        schemaVersion: '2.2'
        description: "Nightly backup of n8n Postgres DB"
        mainSteps:
          - action: aws:runShellScript
            name: backup
            inputs:
              runCommand:
                - "#!/bin/bash"
                - "set -euxo pipefail"
                - "TIMESTAMP=$(date +%F)"
                - "/usr/bin/docker exec postgres \\"
                - "  pg_dump -U ${POSTGRES_NON_ROOT_USER} \\"
                - "  -d ${POSTGRES_DB} -Fc > /tmp/$TIMESTAMP.dump"
                - "aws s3 cp /tmp/$TIMESTAMP.dump \\"
                - "  s3://${BackupBucketName}/${ClientName}/$TIMESTAMP.dump"
                - "rm /tmp/$TIMESTAMP.dump"

  N8nBackupEventsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowSSMAndS3Backup
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:SendCommand
                Resource:
                  - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/${N8nEC2Instance}
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:document/${N8nDbBackupDocument}
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource:
                  - !Sub arn:aws:s3:::${BackupBucketName}/*
  
  N8nBackupSchedule:
    Type: AWS::Events::Rule
    Properties:
      Name: n8n-nightly-db-backup
      ScheduleExpression: 'cron(0 1 * * ? *)'
      State: ENABLED
      Targets:
        - Arn: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:document/${N8nDbBackupDocument}
          Id: N8nBackupTarget
          RoleArn: !GetAtt N8nBackupEventsRole.Arn
          RunCommandParameters:
            RunCommandTargets:
              - Key: InstanceIds
                Values:
                  - !Ref N8nEC2Instance
            
Outputs:
  InstanceId:
    Description: The ID of the EC2 instance
    Value: !Ref N8nEC2Instance
  PublicIp:
    Description: Public IP of the EC2 instance
    Value: !GetAtt N8nEC2Instance.PublicIp
