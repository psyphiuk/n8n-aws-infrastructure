AWSTemplateFormatVersion: '2010-09-09'
Description: n8n stack for one client

Parameters:
  ClientName:
    Type: String
    Description: The identifier for this n8n deployment (e.g. "tybi.ai")

  # ────────── Network parameters ──────────
  VpcCidr:
    Type: String
    Default: "10.0.0.0/16"
    Description: CIDR block for the VPC
  PublicSubnetCIDRs:
    Type: String
    Default: "10.0.1.0/24,10.0.2.0/24"
    Description: Two public subnet CIDRs for the ALB and NAT gateway
  PrivateSubnetCIDRs:
    Type: String
    Default: "10.0.101.0/24,10.0.102.0/24"
    Description: Two private subnet CIDRs for your EC2 instances
  CertificateArn:
    Type: String
    Description: ACM certificate ARN for your domain

  # ────────── Security & Database parameters ──────────
  PostgresDb:             
    Type: String 
    Default: n8n
    Description: Postgres database name for n8n
  PostgresUser:           
    Type: String 
    Default: n8n
    Description: Postgres database user for n8n
  SsmPostgresPasswordPath: 
    Type: String 
    Description: SSM path for Postgres password
  SsmEncryptionKeyPath:   
    Type: String
    Description: SSM path for encryption key
  DBInstanceClass:
    Type: String
    Default: db.t3.medium
    Description: RDS instance class
  AllocatedStorage:
    Type: Number
    Default: 20
    Description: Storage in GB for the database
  MultiAZ:
    Type: String
    AllowedValues: [ 'true', 'false' ]
    Default: 'false'
    Description: Enable Multi-AZ for high availability
  SSHCidr:
    Type: String
    Default: '0.0.0.0/0'
    Description: CIDR block for SSH access
  RepoPath:
    Type: String
    Default: '/home/ec2-user/app'
    Description: Relative path (in the repo) to your app directory
  CliPluginsDir:
    Type: String
    Default: '/usr/libexec/docker/cli-plugins'
    Description: Path to the directory containing the Compose CLI plugin

  # ────────── IAM & Compute parameters ──────────
  RepoURL:
    Type: String
    Default: 'https://github.com/psyphiuk/n8n-aws-infrastructure'
    Description: Git repository URL for the infra code
  RepoBranch:
    Type: String
    Default: master
    Description: Git branch to clone
  InstanceType:
    Type: String
    Default: t3.medium
    Description: EC2 instance type for n8n
  BasicAuthActive:        
    Type: String 
    Default: "true"
    Description: Whether to use basic auth for n8n
  BasicAuthUser:          
    Type: String 
    Description:  Basic auth username for n8n
  BasicAuthPassword:      
    Type: String 
    Description: Basic auth password for n8n
  Timezone:               
    Type: String
    Default: Europe/London 
    Description: Timezone for n8n
  DockerDir:              
    Type: String 
    Default: docker
    Description: Directory containing the docker compose file

  AmiId:
    Type: AWS::EC2::Image::Id
    Description: AMI ID for the n8n EC2 instance (e.g. Amazon Linux 2)

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2 KeyPair for SSH access

Resources:
  NetworkStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: network.yaml
      Parameters:
        # pass through any needed params…
        VpcCidr:              !Ref VpcCidr
        PublicSubnetCIDRs:    !Ref PublicSubnetCIDRs
        PrivateSubnetCIDRs:   !Ref PrivateSubnetCIDRs

  IAMStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: iam.yaml
      Parameters:
        ClientName: !Ref ClientName

  SecurityStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: security.yaml
      Parameters:
        VpcId:    
         Fn::GetAtt:
          - NetworkStack
          - Outputs.VpcId
        SSHCidr:  !Ref SSHCidr

  DatabaseStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: database.yaml
      Parameters:
        DBName:                    !Ref PostgresDb
        DBUsername:                !Ref PostgresUser
        SSMPostgresPasswordPath:   !Ref SsmPostgresPasswordPath
        DBInstanceClass:           !Ref DBInstanceClass
        AllocatedStorage:          !Ref AllocatedStorage
        MultiAZ:                   !Ref MultiAZ
        DBSubnetIds:               
          Fn::GetAtt:
            - NetworkStack
            - Outputs.PrivateSubnetIds
        RDSSecurityGroupId:        
          Fn::GetAtt:
            - SecurityStack
            - Outputs.RDSSecurityGroupId


  ComputeStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: compute.yaml
      Parameters:
        AmiId:                   !Ref AmiId
        InstanceType:            !Ref InstanceType
        KeyName:                 !Ref KeyName
        PrivateSubnetIds:        
          Fn::GetAtt:
            - NetworkStack
            - Outputs.PrivateSubnetIds
        EC2SecurityGroupId:      
          Fn::GetAtt:
            - SecurityStack
            - Outputs.EC2SecurityGroupId
        InstanceProfileName:      
          Fn::GetAtt:
            - IAMStack
            - Outputs.InstanceProfileName
        ClientName:              !Ref ClientName
        RepoURL:                 !Ref RepoURL
        RepoBranch:              !Ref RepoBranch
        PostgresDb:              !Ref PostgresDb
        PostgresUser:            !Ref PostgresUser
        SsmPostgresPasswordPath: !Ref SsmPostgresPasswordPath
        SsmEncryptionKeyPath:    !Ref SsmEncryptionKeyPath
        BasicAuthActive:         !Ref BasicAuthActive
        BasicAuthUser:           !Ref BasicAuthUser
        BasicAuthPassword:       !Ref BasicAuthPassword
        Timezone:                !Ref Timezone
        DockerDir:               !Ref DockerDir
        RepoPath:                !Ref RepoPath
        CliPluginsDir:           !Ref CliPluginsDir

  LoadBalancerStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: load-balancer.yaml
      Parameters:
        VpcId:    
         Fn::GetAtt:
          - NetworkStack
          - Outputs.VpcId
        PublicSubnetIds:     
          Fn::GetAtt:
            - NetworkStack
            - Outputs.PublicSubnetIds
        ALBSecurityGroupId:  
          Fn::GetAtt:
            - SecurityStack
            - Outputs.ALBSecurityGroupId
        CertificateArn:      !Ref CertificateArn

  OutputsStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: outputs.yaml
      Parameters:
        VpcId:    
         Fn::GetAtt:
          - NetworkStack
          - Outputs.VpcId
        PublicSubnetIds:     
          Fn::GetAtt:
            - NetworkStack
            - Outputs.PublicSubnetIds
        PrivateSubnetIds:    
          Fn::GetAtt:
            - NetworkStack
            - Outputs.PrivateSubnetIds
        ALBSecurityGroupId:  
          Fn::GetAtt:
            - SecurityStack
            - Outputs.ALBSecurityGroupId
        EC2SecurityGroupId:  
          Fn::GetAtt:
            - SecurityStack
            - Outputs.EC2SecurityGroupId
        RDSSecurityGroupId:  
          Fn::GetAtt:
            - SecurityStack
            - Outputs.RDSSecurityGroupId
        DBEndpointAddress:   
          Fn::GetAtt:
            - DatabaseStack
            - Outputs.DBEndpointAddress
        DBPort:              
          Fn::GetAtt:
            - DatabaseStack
            - Outputs.DBPort
        LoadBalancerDNSName: 
          Fn::GetAtt:
            - LoadBalancerStack
            - Outputs.LoadBalancerDNSName
        InstanceProfileName: 
          Fn::GetAtt:
            - IAMStack
            - Outputs.InstanceProfileName


Outputs: {}
  # You can aggregate or reference child‐stack outputs here
