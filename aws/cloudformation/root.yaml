AWSTemplateFormatVersion: '2010-09-09'
Description: n8n stack for one client

Parameters:
  ClientName:
    Type: String
    Description: The identifier for this n8n deployment (e.g. "tybi.ai")

  # ────────── Network parameters ──────────
  VpcCidr:
    Type: String
    Default: "10.0.0.0/16"
    Description: CIDR block for the VPC
  PublicSubnetCIDRs:
    Type: String
    Default: "10.0.1.0/24,10.0.2.0/24"
    Description: Two public subnet CIDRs for the ALB and NAT gateway

  # ────────── Security & Database parameters ──────────
  SsmPostgresPasswordPath: 
    Type: String 
    Description: SSM path for Postgres password
  SsmEncryptionKeyPath:   
    Type: String
    Description: SSM path for encryption key
  SSHCidr:
    Type: String
    Default: '0.0.0.0/0'
    Description: CIDR block for SSH access

  # ────────── IAM & Compute parameters ──────────
  RepoURL:
    Type: String
    Default: 'https://github.com/psyphiuk/n8n-aws-infrastructure'
    Description: Git repository URL for the infra code
  RepoBranch:
    Type: String
    Default: master
    Description: Git branch to clone
  InstanceType:
    Type: String
    Default: t3.small
    Description: EC2 instance type for n8n
  BasicAuthActive:        
    Type: String 
    Default: "true"
    Description: Whether to use basic auth for n8n
  BasicAuthUser:          
    Type: String 
    Description:  Basic auth username for n8n
  BasicAuthPassword:      
    Type: String 
    Description: Basic auth password for n8n
  Timezone:               
    Type: String
    Default: Europe/London 
    Description: Timezone for n8n
  DockerDir:              
    Type: String 
    Default: docker
    Description: Directory containing the docker compose file
  AmiId:
    Type: AWS::EC2::Image::Id
    Description: AMI ID for the n8n EC2 instance (e.g. Amazon Linux 2)
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2 KeyPair for SSH access

Resources:
  NetworkStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: network.yaml
      Parameters:
        # pass through any needed params…
        VpcCidr:              !Ref VpcCidr
        PublicSubnetCIDRs:    !Ref PublicSubnetCIDRs

  IAMStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: iam.yaml
      Parameters:
        ClientName: !Ref ClientName

  SecurityStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: security.yaml
      Parameters:
        VpcId:    
         Fn::GetAtt:
          - NetworkStack
          - Outputs.VpcId
        SSHCidr:  !Ref SSHCidr

  ComputeStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: compute.yaml
      Parameters:
        AmiId:                   !Ref AmiId
        InstanceType:            !Ref InstanceType
        KeyName:                 !Ref KeyName
        PublicSubnetIds:        
          Fn::GetAtt:
            - NetworkStack
            - Outputs.PublicSubnetIds
        EC2SecurityGroupId:      
          Fn::GetAtt:
            - SecurityStack
            - Outputs.EC2SecurityGroupId
        InstanceProfileName:      
          Fn::GetAtt:
            - IAMStack
            - Outputs.InstanceProfileName
        ClientName:              !Ref ClientName
        RepoURL:                 !Ref RepoURL
        RepoBranch:              !Ref RepoBranch
        SsmPostgresPasswordPath: !Ref SsmPostgresPasswordPath
        SsmEncryptionKeyPath:    !Ref SsmEncryptionKeyPath
        BasicAuthActive:         !Ref BasicAuthActive
        BasicAuthUser:           !Ref BasicAuthUser
        BasicAuthPassword:       !Ref BasicAuthPassword
        Timezone:                !Ref Timezone
        DockerDir:               !Ref DockerDir

Outputs: {}
  # You can aggregate or reference child‐stack outputs here
